/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

option java_package = "org.apache.tez.dag.api.client.rpc";
option java_outer_classname = "DAGClientAMProtocolRPC";
option java_generic_services = true;
option java_generate_equals_and_hash = true;

//import "DAGClientAMProtocolRecords.proto";

import "DAGApiRecords.proto";

message GetAllDAGsRequestProto {
}

message GetAllDAGsResponseProto {
  repeated string dagId = 1;
}

message GetDAGStatusRequestProto {
  optional string dagId = 1;
  repeated StatusGetOptsProto statusOptions = 3;
  optional int64 timeout = 4;
}

message GetDAGStatusResponseProto {
  optional DAGStatusProto dagStatus = 1;
}

message GetVertexStatusRequestProto {
  optional string dagId = 1;
  optional string vertexName = 2;
  repeated StatusGetOptsProto statusOptions = 3;
}

message GetVertexStatusResponseProto {
  optional VertexStatusProto vertexStatus = 1;
}

message TryKillDAGRequestProto {
  optional string dagId = 1;
}

message TryKillDAGResponseProto {
  //nothing yet
}

message SubmitDAGRequestProto {
  optional DAGPlan d_a_g_plan = 1;
  optional PlanLocalResourcesProto additional_am_resources = 2;
  optional string serializedRequestPath = 3;
}

message SubmitDAGResponseProto {
  optional string dagId = 1;
}

message ShutdownSessionRequestProto {
}

message ShutdownSessionResponseProto {
}

message GetDAGInformationRequestProto {
  required string dagId = 1;
}

message GetDAGInformationResponseProto {
  optional DAGInformationProto dagInformation = 1;
}

message GetTaskInformationRequestProto {
  required string dagId = 1;
  required string vertexId = 2;
  required string taskId = 3;
}

message GetTaskInformationResponseProto {
  optional TaskInformationProto taskInformation = 1;
}

message GetTaskInformationListRequestProto {
  required string dagId = 1;
  required string vertexId = 2;
  optional string startTaskId = 3;
  optional int32 limit = 4;
}

message GetTaskInformationListResponseProto {
  repeated TaskInformationProto taskInformation = 1;
}

enum TezAppMasterStatusProto {
  INITIALIZING = 0;
  READY = 1;
  RUNNING = 2;
  SHUTDOWN = 3;
}

message GetAMStatusRequestProto {
}

message GetAMStatusResponseProto {
  required TezAppMasterStatusProto status = 1;
}

service DAGClientAMProtocol {
  rpc getAllDAGs (GetAllDAGsRequestProto) returns (GetAllDAGsResponseProto);
  rpc getDAGStatus (GetDAGStatusRequestProto) returns (GetDAGStatusResponseProto);
  rpc getDAGInformation (GetDAGInformationRequestProto) returns (GetDAGInformationResponseProto);

  rpc getVertexStatus (GetVertexStatusRequestProto) returns (GetVertexStatusResponseProto);
  rpc getTaskInformation (GetTaskInformationRequestProto) returns (GetTaskInformationResponseProto);
  rpc getTaskInformationList (GetTaskInformationListRequestProto) returns (GetTaskInformationListResponseProto);

  rpc tryKillDAG (TryKillDAGRequestProto) returns (TryKillDAGResponseProto);
  rpc submitDAG (SubmitDAGRequestProto) returns (SubmitDAGResponseProto);
  rpc shutdownSession (ShutdownSessionRequestProto) returns (ShutdownSessionResponseProto);
  rpc getAMStatus (GetAMStatusRequestProto) returns (GetAMStatusResponseProto);
}
