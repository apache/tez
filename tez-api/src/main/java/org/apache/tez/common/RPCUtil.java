/**
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package org.apache.tez.common;

import java.io.IOException;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;

import org.apache.hadoop.ipc.RemoteException;
import org.apache.tez.dag.api.DAGNotRunningException;
import org.apache.tez.dag.api.SessionNotRunning;
import org.apache.tez.dag.api.TezException;

import com.google.protobuf.ServiceException;

public final class RPCUtil {

  private RPCUtil() {}

  /**
   * Returns an instance of {@link TezException}
   */
  public static TezException getRemoteException(Throwable t) {
    return new TezException(t);
  }

  /**
   * Returns an instance of {@link TezException}
   */
  public static TezException getRemoteException(String message) {
    return new TezException(message);
  }

  private static <T extends Throwable> T instantiateException(
      Class<? extends T> cls, RemoteException re) throws RemoteException {
    try {
      Constructor<? extends T> cn = cls.getConstructor(String.class);
      cn.setAccessible(true);
      T ex = cn.newInstance(re.getMessage());
      ex.initCause(re);
      return ex;
      // RemoteException contains useful information as against the
      // java.lang.reflect exceptions.
    } catch (NoSuchMethodException | IllegalArgumentException | SecurityException | InstantiationException
            | IllegalAccessException | InvocationTargetException e) {
      throw re;
    }
  }

  private static <T extends TezException> T instantiateTezException(
      Class<? extends T> cls, RemoteException re) throws RemoteException {
    return instantiateException(cls, re);
  }

  private static <T extends IOException> T instantiateIOException(
      Class<? extends T> cls, RemoteException re) throws RemoteException {
    return instantiateException(cls, re);
  }

  private static <T extends RuntimeException> T instantiateRuntimeException(
      Class<? extends T> cls, RemoteException re) throws RemoteException {
    return instantiateException(cls, re);
  }

  /**
   * Utility method that unwraps and returns appropriate exceptions.
   *
   * @param se
   *          ServiceException
   * @return An instance of the actual exception, which will be a subclass of
   *         {@link TezException} or {@link IOException}
   */
  public static Void unwrapAndThrowException(ServiceException se)
      throws IOException, TezException {

    Throwable cause = se.getCause();
    if (cause == null) {
      // SE generated by the RPC layer itself.
      throw new IOException(se);
    } else {
      if (cause instanceof RemoteException) {
        RemoteException re = (RemoteException) cause;
        Class<?> realClass;
        try {
          realClass = Class.forName(re.getClassName());
        } catch (ClassNotFoundException cnf) {
          // Assume this to be a new exception type added to Tez. This isn't
          // absolutely correct since the RPC layer could add an exception as
          // well.
          throw instantiateTezException(TezException.class, re);
        }

        if (SessionNotRunning.class.isAssignableFrom(realClass)) {
          throw instantiateTezException(
              realClass.asSubclass(SessionNotRunning.class), re);
        } else if (DAGNotRunningException.class.isAssignableFrom(realClass)) {
            throw instantiateTezException(
                realClass.asSubclass(DAGNotRunningException.class), re);
        } else if (TezException.class.isAssignableFrom(realClass)) {
          throw instantiateTezException(
              realClass.asSubclass(TezException.class), re);
        } else if (IOException.class.isAssignableFrom(realClass)) {
          throw instantiateIOException(realClass.asSubclass(IOException.class),
              re);
        } else if (RuntimeException.class.isAssignableFrom(realClass)) {
          throw instantiateRuntimeException(
              realClass.asSubclass(RuntimeException.class), re);
        } else {
          throw re;
        }
        // RemoteException contains useful information as against the
        // java.lang.reflect exceptions.

      } else if (cause instanceof IOException) {
        // RPC Client exception.
        throw (IOException) cause;
      } else if (cause instanceof RuntimeException) {
        // RPC RuntimeException
        throw (RuntimeException) cause;
      } else {
        // Should not be generated.
        throw new IOException(se);
      }
    }
  }

  /**
   * Utility method that unwraps and returns appropriate exceptions.
   *
   * @param se
   *          ServiceException
   * @return An instance of the actual exception, which will be a subclass of
   *         {@link TezException} or {@link IOException}
   */
  public static Void unwrapAndThrowNonIOException(ServiceException se)
      throws TezException {
    try {
      return unwrapAndThrowException(se);
    } catch (IOException ioe) {
      throw new TezException(ioe);
    }
  }

}
